/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


import type { Application } from 'express-serve-static-core';
import type { Request, Response } from 'express';


export type expressRequest<RType extends Request, Locals extends Record<string, any>, Query> =  Omit<RType, 'app' | 'query'> & { app: Application<Locals>, query: Query };


export interface paths {
  "/pets": {
    /**
     * List all pets 
     * @description List the pets that exist.
     */
    get: operations["listPets"];
    /** Create a pet */
    post: operations["createPets"];
  };
  "/pets/{petId}": {
    /** Info for a specific pet */
    get: operations["showPetById"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    $ref: external["schemas/_index.yaml"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export interface external {
  "../common/schemas/error.yaml": {
    code: string;
    message?: string;
  }
  "schemas/_index.yaml": unknown
  "schemas/category.yaml": {
    name: string;
  }
  "schemas/pet.yaml": {
    /** Format: int64 */
    id?: number;
    category?: external["schemas/category.yaml"];
    /** @example doggie */
    name: string;
    photoUrls: (string)[];
    /**
     * @description pet status in the store 
     * @enum {string}
     */
    status?: "available" | "pending" | "sold";
  }
  "schemas/pets.yaml": (external["schemas/pet.yaml"])[]
}

export interface operations {

  /**
   * List all pets 
   * @description List the pets that exist.
   */
  listPets: {
    parameters: {
      query: {
        /** @description How many items to return at one time (max 100) */
        limit?: number;
      };
    };
    responses: {
      /** @description A paged array of pets */
      200: {
        headers: {
          /** @description A link to the next page of responses */
          "x-next"?: string;
        };
        content: {
          "application/json": external["schemas/pet.yaml"];
        };
      };
      /** @description unexpected error */
      default: {
        content: {
          "application/json": external["../common/schemas/error.yaml"];
        };
      };
    };
  };
  /** Create a pet */
  createPets: {
    responses: {
      /** @description Null response */
      201: never;
      /** @description unexpected error */
      default: {
        content: {
          "application/json": external["../common/schemas/error.yaml"];
        };
      };
    };
  };
  /** Info for a specific pet */
  showPetById: {
    parameters: {
      path: {
        /** @description The id of the pet to retrieve */
        petId: string;
      };
    };
    responses: {
      /** @description Expected response to a valid request */
      200: {
        content: {
          "application/json": external["schemas/pet.yaml"];
        };
      };
      /** @description unexpected error */
      default: {
        content: {
          "application/json": external["../common/schemas/error.yaml"];
        };
      };
    };
  };
}

export interface express<
  SLocals extends Record<string, any>,
  RLocals extends Record<string, any>
> {

  listPets: {
    responses: operations["listPets"]["responses"]["200"]["content"]["application/json"] | operations["listPets"]["responses"]["default"]["content"]["application/json"];
    request: expressRequest<Request<never, express<SLocals, RLocals>["listPets"]["responses"], never, never, RLocals>, SLocals, operations["listPets"]["parameters"]["query"]>;
    response: Response<express<SLocals, RLocals>["listPets"]["responses"]>;
    handler: (req: express<SLocals, RLocals>["listPets"]["request"], res: express<SLocals, RLocals>["listPets"]["response"]) => void | Promise<void>;
  };
  createPets: {
    responses: operations["createPets"]["responses"]["default"]["content"]["application/json"];
    request: expressRequest<Request<never, express<SLocals, RLocals>["createPets"]["responses"], never, never, RLocals>, SLocals, never>;
    response: Response<express<SLocals, RLocals>["createPets"]["responses"]>;
    handler: (req: express<SLocals, RLocals>["createPets"]["request"], res: express<SLocals, RLocals>["createPets"]["response"]) => void | Promise<void>;
  };
  showPetById: {
    responses: operations["showPetById"]["responses"]["200"]["content"]["application/json"] | operations["showPetById"]["responses"]["default"]["content"]["application/json"];
    request: expressRequest<Request<operations["showPetById"]["parameters"]["path"], express<SLocals, RLocals>["showPetById"]["responses"], never, never, RLocals>, SLocals, never>;
    response: Response<express<SLocals, RLocals>["showPetById"]["responses"]>;
    handler: (req: express<SLocals, RLocals>["showPetById"]["request"], res: express<SLocals, RLocals>["showPetById"]["response"]) => void | Promise<void>;
  };
}

export interface handlers<SLocals extends Record<string, any>, RLocals extends Record<string, any>> {
  "/pets": {
    get: express<SLocals, RLocals>["listPets"]["handler"];
    post: express<SLocals, RLocals>["createPets"]["handler"];
  };
  "/pets/{petId}": {
    get: express<SLocals, RLocals>["showPetById"]["handler"];
  };
};